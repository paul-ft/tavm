#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>

#include "ram.h"

int main (int argc, char *argv[])
{
	if (argc<1) /*dirty argument checking*/
	{
		printf("Syntax : tavm [RAM SIZE IN MIB]"); /*user guide*/
		return 1;
	}
	//else is bloat (:  (i use arch btw)

//booting

	printf("Booting...\n"); /*dirty logging*/
	if(atoi(argv[1])==0) /*it just cant run with 0mib of ram*/
	{
/*	printf("\nYou are trying to run whith 0mib of ram. It is tour last chance to go back. Here is your choice : \n\t - Or you choose the blue pill and everything gonna stop \n\t - Or you choose the red pill and the vm will try to boot  \n (b:blue r:red)\n");
/*just a joke*/	int tmp=getchar();
/*just a joke*/	if(tmp=='b'||tmp=='B'){printf("You did the good choice. Good bye.\n"); return 3;}
/*just a joke*/	else if(tmp=='R'||tmp=='r'){printf("\nNice try, but in fact you just cant, fool\n"); return 42;}
/*fun fact : it returns 1*/ return 1;
	}
	struct ram* memory=&(struct ram){.size=1048576*(uint64_t)atoi(argv[1]), .data_array=NULL};  /* creating a ram structure for the memory (see ram.h) */
	ram_init(memory); /*initializing the memory (see ram.c)*/
	printf("TAVM successfully booted\n"); /*dirty logging*/



// leaving :
	printf("Leaving...\n"); /*dirty logging*/
	ram_free(memory); /*freeing the memory (se ram.c)*/
	printf("Goodbye \n"); /*it's important to be polite with the user*/
	return 0; /*no comment needed i guess*/
}
